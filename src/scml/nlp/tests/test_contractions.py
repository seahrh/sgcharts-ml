from scml.nlp import ContractionExpansion


class TestExpandContractions:
    def test_no_replacement(self):
        f = ContractionExpansion()
        assert f.apply("") == ""
        assert f.apply("bar") == "bar"

    def test_pattern_is_not_case_sensitive(self):
        f = ContractionExpansion()
        assert f.apply("AIN'T") == "are not"

    def test_replacement_is_position_invariant(self):
        f = ContractionExpansion()
        assert f.apply("ain't") == "are not"
        assert f.apply("1 ain't 2") == "1 are not 2"
        assert f.apply("1 ain't") == "1 are not"
        assert f.apply("ain't 2") == "are not 2"
        assert f.apply("aren't") == "are not"
        assert f.apply("can't") == "cannot"
        assert f.apply("can't've") == "cannot have"
        assert f.apply("'cause") == "because"
        assert f.apply("could've") == "could have"
        assert f.apply("couldn't") == "could not"
        assert f.apply("couldn't've") == "could not have"
        assert f.apply("didn't") == "did not"
        assert f.apply("doesn't") == "does not"
        assert f.apply("don't") == "do not"
        assert f.apply("hadn't") == "had not"
        assert f.apply("hadn't've") == "had not have"
        assert f.apply("hasn't") == "has not"
        assert f.apply("haven't") == "have not"
        assert f.apply("he'd") == "he would"
        assert f.apply("he'd've") == "he would have"
        assert f.apply("he'll") == "he will"
        assert f.apply("he'll've") == "he will have"
        assert f.apply("he's") == "he is"
        assert f.apply("how'd") == "how did"
        assert f.apply("how'd'y") == "how do you"
        assert f.apply("how'll") == "how will"
        assert f.apply("how's") == "how is"
        assert f.apply("I'd") == "I would"
        assert f.apply("I'd've") == "I would have"
        assert f.apply("I'll") == "I will"
        assert f.apply("I'll've") == "I will have"
        assert f.apply("I'm") == "I am"
        assert f.apply("I've") == "I have"
        assert f.apply("isn't") == "is not"
        assert f.apply("it'd") == "it would"
        assert f.apply("it'd've") == "it would have"
        assert f.apply("it'll") == "it will"
        assert f.apply("it'll've") == "it will have"
        assert f.apply("it's") == "it is"
        assert f.apply("let's") == "let us"
        assert f.apply("ma'am") == "madam"
        assert f.apply("mayn't") == "may not"
        assert f.apply("might've") == "might have"
        assert f.apply("mightn't") == "might not"
        assert f.apply("mightn't've") == "might not have"
        assert f.apply("must've") == "must have"
        assert f.apply("mustn't") == "must not"
        assert f.apply("mustn't've") == "must not have"
        assert f.apply("needn't") == "need not"
        assert f.apply("needn't've") == "need not have"
        assert f.apply("o'clock") == "of the clock"
        assert f.apply("oughtn't") == "ought not"
        assert f.apply("oughtn't've") == "ought not have"
        assert f.apply("shan't") == "shall not"
        assert f.apply("sha'n't") == "shall not"
        assert f.apply("shan't've") == "shall not have"
        assert f.apply("she'd") == "she would"
        assert f.apply("she'd've") == "she would have"
        assert f.apply("she'll") == "she will"
        assert f.apply("she'll've") == "she will have"
        assert f.apply("she's") == "she is"
        assert f.apply("should've") == "should have"
        assert f.apply("shouldn't") == "should not"
        assert f.apply("shouldn't've") == "should not have"
        assert f.apply("so've") == "so have"
        assert f.apply("so's") == "so is"
        assert f.apply("that'd") == "that would"
        assert f.apply("that'd've") == "that would have"
        assert f.apply("that's") == "that is"
        assert f.apply("there'd") == "there would"
        assert f.apply("there'd've") == "there would have"
        assert f.apply("there's") == "there is"
        assert f.apply("they'd") == "they would"
        assert f.apply("they'd've") == "they would have"
        assert f.apply("they'll") == "they will"
        assert f.apply("they'll've") == "they will have"
        assert f.apply("they're") == "they are"
        assert f.apply("they've") == "they have"
        assert f.apply("to've") == "to have"
        assert f.apply("wasn't") == "was not"
        assert f.apply("we'd") == "we would"
        assert f.apply("we'd've") == "we would have"
        assert f.apply("we'll") == "we will"
        assert f.apply("we'll've") == "we will have"
        assert f.apply("we're") == "we are"
        assert f.apply("we've") == "we have"
        assert f.apply("weren't") == "were not"
        assert f.apply("what'll") == "what will"
        assert f.apply("what'll've") == "what will have"
        assert f.apply("what're") == "what are"
        assert f.apply("what's") == "what is"
        assert f.apply("what've") == "what have"
        assert f.apply("when's") == "when is"
        assert f.apply("when've") == "when have"
        assert f.apply("where'd") == "where did"
        assert f.apply("where's") == "where is"
        assert f.apply("where've") == "where have"
        assert f.apply("who'll") == "who will"
        assert f.apply("who'll've") == "who will have"
        assert f.apply("who's") == "who is"
        assert f.apply("who've") == "who have"
        assert f.apply("why's") == "why is"
        assert f.apply("why've") == "why have"
        assert f.apply("will've") == "will have"
        assert f.apply("won't") == "will not"
        assert f.apply("won't've") == "will not have"
        assert f.apply("would've") == "would have"
        assert f.apply("wouldn't") == "would not"
        assert f.apply("wouldn't've") == "would not have"
        assert f.apply("y'all") == "you all"
        assert f.apply("y'all'd") == "you all would"
        assert f.apply("y'all'd've") == "you all would have"
        assert f.apply("y'all're") == "you all are"
        assert f.apply("y'all've") == "you all have"
        assert f.apply("you'd") == "you would"
        assert f.apply("you'd've") == "you would have"
        assert f.apply("you'll") == "you will"
        assert f.apply("you'll've") == "you will have"
        assert f.apply("you're") == "you are"
        assert f.apply("you've") == "you have"
        assert f.apply("dunno") == "do not know"
        assert f.apply("'em") == "them"
        assert f.apply("everyone's") == "everyone is"
        assert f.apply("everybody's") == "everybody is"
        assert f.apply("g'day") == "good day"
        assert f.apply("gimme") == "give me"
        assert f.apply("giv'n") == "given"
        assert f.apply("gonna") == "going to"
        assert f.apply("gotta") == "got to"
        assert f.apply("had've") == "had have"
        assert f.apply("he've") == "he have"
        assert f.apply("howdy") == "how do you do"
        assert f.apply("innit") == "is it not"
        assert f.apply("kinda") == "kind of"
        assert f.apply("ne'er") == "never"
        assert f.apply("o'er") == "over"
        assert f.apply("ol'") == "old"
        assert f.apply("someone's") == "someone is"
        assert f.apply("somebody's") == "somebody is"
        assert f.apply("something's") == "something is"
        assert f.apply("that'll") == "that will"
        assert f.apply("that're") == "that are"
        assert f.apply("that've") == "that have"
        assert f.apply("there'll") == "there will"
        assert f.apply("there're") == "there are"
        assert f.apply("these'll") == "these will"
        assert f.apply("these're") == "these are"
        assert f.apply("these've") == "these have"
        assert f.apply("this's") == "this is"
        assert f.apply("this'll") == "this will"
        assert f.apply("those're") == "those are"
        assert f.apply("those'll") == "those will"
        assert f.apply("those've") == "those have"
        assert f.apply("'tis") == "it is"
        assert f.apply("'twas") == "it was"
        assert f.apply("wanna") == "want to"
        assert f.apply("what'd") == "what did"
        assert f.apply("which'd") == "which would"
        assert f.apply("which'll") == "which will"
        assert f.apply("which're") == "which are"
        assert f.apply("which's") == "which is"
        assert f.apply("which've") == "which have"
        assert f.apply("who'd") == "who did"
        assert f.apply("who're") == "who are"
        assert f.apply("why'd") == "why did"
        assert f.apply("why're") == "why are"
        assert f.apply("y'at") == "you at"
